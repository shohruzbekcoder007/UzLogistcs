{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DatePickerIOS from \"./DatePickerIOS\";\nimport DatePickerAndroid from \"./DatePickerAndroid\";\nvar DatePicker = Platform.select({\n  android: DatePickerAndroid,\n  ios: DatePickerIOS\n});\nDatePicker.propTypes = propTypes;\n\nvar DatePickerWrapper = function DatePickerWrapper(props) {\n  if (__DEV__) throwIfInvalidProps(props);\n  return React.createElement(DatePicker, _extends({\n    ref: props.innerRef\n  }, props, {\n    title: getTitle(props),\n    androidVariant: getAndroidVariant(props)\n  }));\n};\n\nvar getAndroidVariant = function getAndroidVariant(props) {\n  var modal = props.modal,\n      androidVariant = props.androidVariant;\n  if (androidVariant) return androidVariant;\n  return modal ? 'nativeAndroid' : 'iosClone';\n};\n\nvar getTitle = function getTitle(props) {\n  var title = props.title,\n      mode = props.mode;\n  if (title === null) return '';\n  if (title) return title;\n  if (mode === 'time') return 'Select time';\n  return 'Select date';\n};\n\nexport default React.memo(DatePickerWrapper);","map":{"version":3,"sources":["D:/UzLogistcs/components/DatePickerWrapper.js"],"names":["React","DatePickerIOS","DatePickerAndroid","DatePicker","Platform","select","android","ios","propTypes","DatePickerWrapper","props","__DEV__","throwIfInvalidProps","innerRef","getTitle","getAndroidVariant","modal","androidVariant","title","mode","memo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAOC,aAAP;AACA,OAAOC,iBAAP;AAKA,IAAMC,UAAU,GAAGC,QAAQ,CAACC,MAAT,CAAgB;AACjCC,EAAAA,OAAO,EAAEJ,iBADwB;AAEjCK,EAAAA,GAAG,EAAEN;AAF4B,CAAhB,CAAnB;AAKAE,UAAU,CAACK,SAAX,GAAuBA,SAAvB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AACnC,MAAIC,OAAJ,EAAaC,mBAAmB,CAACF,KAAD,CAAnB;AACb,SACE,oBAAC,UAAD;AACE,IAAA,GAAG,EAAEA,KAAK,CAACG;AADb,KAEMH,KAFN;AAKE,IAAA,KAAK,EAAEI,QAAQ,CAACJ,KAAD,CALjB;AAQE,IAAA,cAAc,EAAEK,iBAAiB,CAACL,KAAD;AARnC,KADF;AAcD,CAhBD;;AAkBA,IAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,CAACL,KAAD,EAAW;AACnC,MAAQM,KAAR,GAAkCN,KAAlC,CAAQM,KAAR;AAAA,MAAeC,cAAf,GAAkCP,KAAlC,CAAeO,cAAf;AACA,MAAIA,cAAJ,EAAoB,OAAOA,cAAP;AACpB,SAAOD,KAAK,GAAG,eAAH,GAAqB,UAAjC;AACD,CAJD;;AAMA,IAAMF,QAAQ,GAAG,SAAXA,QAAW,CAACJ,KAAD,EAAW;AAC1B,MAAQQ,KAAR,GAAwBR,KAAxB,CAAQQ,KAAR;AAAA,MAAeC,IAAf,GAAwBT,KAAxB,CAAeS,IAAf;AACA,MAAID,KAAK,KAAK,IAAd,EAAoB,OAAO,EAAP;AACpB,MAAIA,KAAJ,EAAW,OAAOA,KAAP;AACX,MAAIC,IAAI,KAAK,MAAb,EAAqB,OAAO,aAAP;AACrB,SAAO,aAAP;AACD,CAND;;AAQA,eAAenB,KAAK,CAACoB,IAAN,CAAWX,iBAAX,CAAf","sourcesContent":["import React from 'react'\r\nimport { Platform } from 'react-native'\r\nimport DatePickerIOS from './DatePickerIOS'\r\nimport DatePickerAndroid from './DatePickerAndroid'\r\n// import propTypes from './propTypes'\r\n// import { colorToHex } from './colorToHex'\r\n// import { throwIfInvalidProps } from './propChecker'\r\n\r\nconst DatePicker = Platform.select({\r\n  android: DatePickerAndroid,\r\n  ios: DatePickerIOS,\r\n})\r\n\r\nDatePicker.propTypes = propTypes\r\n\r\nconst DatePickerWrapper = (props) => {\r\n  if (__DEV__) throwIfInvalidProps(props)\r\n  return (\r\n    <DatePicker\r\n      ref={props.innerRef}\r\n      {...props}\r\n    //   textColor={colorToHex(props.textColor)}\r\n    //   fadeToColor={colorToHex(props.fadeToColor)}\r\n      title={getTitle(props)}\r\n    //   confirmText={props.confirmText ? props.confirmText : 'Confirm'}\r\n    //   cancelText={props.cancelText ? props.cancelText : 'Cancel'}\r\n      androidVariant={getAndroidVariant(props)}\r\n    //   minuteInterval={props.minuteInterval ? props.minuteInterval : 1}\r\n    //   mode={props.mode ? props.mode : 'datetime'}\r\n    />\r\n  )\r\n}\r\n\r\nconst getAndroidVariant = (props) => {\r\n  const { modal, androidVariant } = props\r\n  if (androidVariant) return androidVariant\r\n  return modal ? 'nativeAndroid' : 'iosClone'\r\n}\r\n\r\nconst getTitle = (props) => {\r\n  const { title, mode } = props\r\n  if (title === null) return ''\r\n  if (title) return title\r\n  if (mode === 'time') return 'Select time'\r\n  return 'Select date'\r\n}\r\n\r\nexport default React.memo(DatePickerWrapper)"]},"metadata":{},"sourceType":"module"}